<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rasmus Einarsson</title><link href="https://rasmuse.github.io/" rel="alternate"></link><link href="https://rasmuse.github.io/feeds/all.atom.xml" rel="self"></link><id>https://rasmuse.github.io/</id><updated>2021-12-23T00:00:00+01:00</updated><entry><title>Bestickepott</title><link href="https://rasmuse.github.io/bestickepott.html" rel="alternate"></link><published>2021-12-23T00:00:00+01:00</published><updated>2021-12-23T00:00:00+01:00</updated><author><name>Rasmus Einarsson</name></author><id>tag:rasmuse.github.io,2021-12-23:/bestickepott.html</id><summary type="html">&lt;p&gt;Ett bestick som borde finnas&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://rasmuse.github.io/images/bestickepott-2021-12-06.jpg" title="En helt vanlig bestickepott."&gt;&lt;/p&gt;</content></entry><entry><title>Setting up a GDAL in a Python virtual environment</title><link href="https://rasmuse.github.io/setting-up-gdal-python-virtualenv.html" rel="alternate"></link><published>2019-08-23T00:00:00+02:00</published><updated>2019-08-23T00:00:00+02:00</updated><author><name>Rasmus Einarsson</name></author><id>tag:rasmuse.github.io,2019-08-23:/setting-up-gdal-python-virtualenv.html</id><summary type="html">&lt;p&gt;Wow, this is easier than ever!&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I remember from a few years ago, installing GDAL into a Python virtual environment was a terrible mess and I resorted to installing it using &lt;a href="https://docs.conda.io"&gt;conda&lt;/a&gt;. It worked perfectly fine, but these days I much prefer &lt;a href="https://docs.pipenv.org/en/latest/"&gt;pipenv&lt;/a&gt; to conda.&lt;/p&gt;
&lt;p&gt;Turns out there is this great package called &lt;a href="https://pypi.org/project/pygdal/"&gt;pygdal&lt;/a&gt; that solves the problem as follows.&lt;/p&gt;
&lt;p&gt;I am on Ubuntu 18.04:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ lsb_release -d
Description:    Ubuntu &lt;span class="m"&gt;18&lt;/span&gt;.04.3 LTS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First installing &lt;code&gt;libgdal-dev&lt;/code&gt; and noting the version number.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt show libgdal-dev
Package: libgdal-dev
Version: &lt;span class="m"&gt;2&lt;/span&gt;.2.3+dfsg-2
&lt;span class="c1"&gt;# blah blah&lt;/span&gt;
Depends: libgdal20 &lt;span class="o"&gt;(=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.2.3+dfsg-2&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="c1"&gt;# and a whole bunch more&lt;/span&gt;
&lt;span class="c1"&gt;# blah blah&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install libgdal-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed, verifying the &lt;code&gt;gdal&lt;/code&gt; version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdal-config --version
&lt;span class="m"&gt;2&lt;/span&gt;.2.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now, in my pipenv, trying to install the corresponding &lt;a href="https://pypi.org/project/pygdal/"&gt;pygdal&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install &lt;span class="nv"&gt;pygdal&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but that crashes with the error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notpip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;satisfies&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;requirement&lt;/span&gt; &lt;span class="n"&gt;pygdal&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I take the latest version&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install &lt;span class="nv"&gt;pygdal&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.3.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it! Works like a charm.&lt;/p&gt;</content><category term="python gdal virtualenv"></category></entry><entry><title>Cleaner subset selection in pandas</title><link href="https://rasmuse.github.io/pandas-subset.html" rel="alternate"></link><published>2019-06-11T00:00:00+02:00</published><updated>2019-06-27T00:00:00+02:00</updated><author><name>Rasmus Einarsson</name></author><id>tag:rasmuse.github.io,2019-06-11:/pandas-subset.html</id><summary type="html">&lt;p&gt;Monkey-patching two subset() methods in pandas.&lt;/p&gt;</summary><content type="html">&lt;div class="summary"&gt;
&lt;p&gt;
Update: It turns out this post solves a problem that was already more or less solved. The &lt;code&gt;.loc[selection]&lt;/code&gt; allows &lt;code&gt;selection&lt;/code&gt; to be a callable. I did not know this but I was &lt;a href="https://github.com/pandas-dev/pandas/issues/26809#issuecomment-501356505"&gt;kindly pointed to it&lt;/a&gt; when I opened an issue in the pandas issue tracker.
&lt;/p&gt;

&lt;p&gt;
My suggested &lt;code&gt;subset()&lt;/code&gt; methods still allow some more advanced use cases (see below for &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;, and &lt;code&gt;GroupBy.subset()&lt;/code&gt;), but the basic functionality similar to &lt;code&gt;filter()&lt;/code&gt; in R is provided by the simple syntax &lt;code&gt;.loc[callable]&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
See the relevant &lt;a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#different-choices-for-indexing"&gt;pandas docs here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I was recently teaching some basics in &lt;a href="https://pandas.pydata.org/pandas-docs/stable/"&gt;pandas&lt;/a&gt; to two colleagues who already know how to work with dataframes in R. They did not seem very happy about my suggested way to chain subset selection operations depending on the values of a DataFrame:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;column_A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;column_B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;column_C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="c1"&gt;# etc&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Talking to my colleagues made me realize that these lines are potentially quite confusing to a Python beginner. The &lt;code&gt;d[d[...]]&lt;/code&gt; appearing on each row is not exactly beautiful. A large part of these rows are meaningless repetition: in &lt;code&gt;.pipe(lambda d: d[something]])&lt;/code&gt; the most important content is actually only the &lt;code&gt;something&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Compare to the equivalent R (&lt;code&gt;dplyr&lt;/code&gt;) code which is clean and crystal clear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column.A&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column.B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;column.C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class="c1"&gt;#etc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Alternatives in pandas&lt;/h2&gt;
&lt;p&gt;To my knowledge there is no equivalent function of the &lt;code&gt;dplyr&lt;/code&gt; &lt;code&gt;filter&lt;/code&gt; in pandas. There is a &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.filter.html?highlight=filter#pandas.DataFrame.filter"&gt;&lt;code&gt;DataFrame.filter&lt;/code&gt; method&lt;/a&gt; but it only selects according to labels. There is also a &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.where.html?highlight=where#pandas.DataFrame.where"&gt;&lt;code&gt;DataFrame.where&lt;/code&gt;&lt;/a&gt; which almost does the right thing, but non-selected rows are filled with &lt;code&gt;nan&lt;/code&gt; instead of being dropped.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, both &lt;code&gt;DataFrame.filter&lt;/code&gt; and &lt;code&gt;DataFrame.where&lt;/code&gt; are useful, but they don't provide anything like the &lt;code&gt;filter&lt;/code&gt; function in R.&lt;/p&gt;
&lt;h2&gt;A monkey-patch solution for &lt;code&gt;NDFrame&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So I ended up monkey-patching pandas to deal with the problem. The first patch goes on &lt;code&gt;NDFrame&lt;/code&gt; and thus provides the syntax &lt;code&gt;.subset(predicate)&lt;/code&gt; on both &lt;code&gt;Series&lt;/code&gt; and &lt;code&gt;DataFrame&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;column_A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;column_B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;column_C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;# etc&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Actually, this code is not much shorter than my usual way with &lt;code&gt;.pipe(...)&lt;/code&gt; but I find that it is much more legible. Less brackets to confuse the eyes, and the verb &lt;code&gt;subset&lt;/code&gt; is more informative than &lt;code&gt;pipe&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;And a similar one for &lt;code&gt;GroupBy&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The other monkey-patch goes on &lt;code&gt;GroupBy&lt;/code&gt;. For example, to select all the above-mean items in each group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;above_mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;my_series&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# usually some index level, but could be any grouping&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This one I find very useful. However, it is slightly questionable because I built it to return an index with the same levels as the original data. This is somewhat unusual compared to most &lt;code&gt;GroupBy&lt;/code&gt; operations, whose results normally have the group keys as index (i.e., one row per group).&lt;/p&gt;
&lt;h2&gt;The code and a notebook with examples&lt;/h2&gt;
&lt;p&gt;The code example below shows my first try at an implementation. It seems to work alright, but I probably will find some edge cases as I use it more.&lt;/p&gt;
&lt;p&gt;I also made a &lt;a href="https://github.com/rasmuse/pandas-subset/blob/ddd6e54bdb8b3bdbc820e8bc48bb792b474a3629/A%20better%20way%20to%20select%20subsets%20in%20pandas.ipynb"&gt;notebook with some more examples&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Get a subset of a pandas NDFrame using a predicate.&lt;/span&gt;

&lt;span class="sd"&gt;    Equivalent to d[predicate(d, *args, **kwargs)]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# Monkey-patch the NDFrame to allow DataFrame.subset(predicate)&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NDFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;groupby_subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Apply subsetting for each group in a pandas GroupBy.&lt;/span&gt;

&lt;span class="sd"&gt;    Roughly equivalent to&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;any_group_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;orig_n_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any_group_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result_n_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;levels_to_drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_n_levels&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;orig_n_levels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;levels_to_drop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# And monkey-patch GroupBy to allow GroupBy.subset(predicate)&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GroupBy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;groupby_subset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python pandas"></category></entry><entry><title>Running multiple instances of Astroid mail</title><link href="https://rasmuse.github.io/multiple-instances-astroid-mail.html" rel="alternate"></link><published>2019-05-19T00:00:00+02:00</published><updated>2019-05-19T00:00:00+02:00</updated><author><name>Rasmus Einarsson</name></author><id>tag:rasmuse.github.io,2019-05-19:/multiple-instances-astroid-mail.html</id><summary type="html">&lt;p&gt;Trying to make an application do something it was not designed to.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am trying to set up a better email solution for myself. Currently I am using only webmail clients. They are not great, but I honestly find them more attractive than the other turnkey solutions on Linux. In the last years I have tried Thunderbird, Evolution, Geary, Kmail, Trojitá, Nylas N1, Sylpheed, Claws, and maybe others; all easy to get started with, but none of them was pleasant enough for me to keep using. Unsatisfying search interfaces and stupid formatting of sent emails were the most common issues for me.&lt;/p&gt;
&lt;p&gt;Anyway, the point here is not to rant about email clients. I have been considering for a long time to try &lt;a href="http://www.mutt.org/"&gt;mutt&lt;/a&gt; (or maybe &lt;a href="https://neomutt.org/"&gt;neomutt&lt;/a&gt;?) or &lt;a href="http://astroidmail.github.io/"&gt;Astroid&lt;/a&gt;. Now the plan is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://isync.sourceforge.net/mbsync.html"&gt;mbsync&lt;/a&gt; to sync IMAP accounts to local maildirs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marlam.de/msmtp/"&gt;msmtp&lt;/a&gt; to talk to SMTP servers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notmuchmail.org/"&gt;notmuch&lt;/a&gt; to index and search emails.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://astroidmail.github.io/"&gt;Astroid&lt;/a&gt; as the actual interface to all these things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly there are many things to learn. This post is about how to create separate instances of this whole setup.&lt;/p&gt;
&lt;h1&gt;One instance per IMAP account&lt;/h1&gt;
&lt;p&gt;As I use the same computer for both work and personal use, my idea is to run multiple instances of my email application(s), one for personal email and another for work. Who knows, maybe in the future even more instances. Technically speaking, Astroid can handle multiple accounts, but there are reasons not to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want to be able to forget about work in my free time. And sometimes also forget about personal emails when I am working. It just seems easiest to run one application for each, and then I can choose which ones I keep open.&lt;/li&gt;
&lt;li&gt;Also, in the past when I have had email clients with multiple accounts, way too often I accidentally sent things from the wrong account. At present I am running two different webmail clients, which is great in this sense. They look different and also have separate address books, so accidentally emailing colleagues from my personal email and vice versa is extremely unlikely. In fact, I really like that they look different, and I've been thinking I should have different color themes for my work and personal Astroid setups, if this ever starts working.&lt;/li&gt;
&lt;li&gt;Last, for purely technical reasons it seems nice to have separate settings for work and personal email, to simplify the transfer of account settings and/or data selectively from one computer to another.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;How I tried to create separate instances of everything&lt;/h1&gt;
&lt;h2&gt;Step 1: Compiling and running one Astroid instance&lt;/h2&gt;
&lt;p&gt;The core of the procedure was to follow the &lt;a href="https://github.com/astroidmail/astroid/blob/v0.14/README.md"&gt;v0.14 &lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;I clone the master branch (at that time commit &lt;code&gt;aae4c52091cc7ae28b336c19d2f0ac4a3a4056bf&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/astroidmail/astroid.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, as per the instructions for &lt;a href="https://github.com/astroidmail/astroid/wiki/Ubuntu"&gt;Ubuntu&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add `protobuf 3.6` PPA for Ubuntu 18.04&lt;/span&gt;
sudo add-apt-repository ppa:maarten-fonville/protobuf

&lt;span class="c1"&gt;# And install dependencies&lt;/span&gt;
sudo apt update
sudo apt-get install cmake git g++ libnotmuch-dev libglibmm-2.4-dev &lt;span class="se"&gt;\&lt;/span&gt;
libgtkmm-3.0-dev libwebkit2gtk-4.0-dev libgmime-2.6-dev libsass-dev &lt;span class="se"&gt;\&lt;/span&gt;
libpeas-dev libgirepository1.0-dev libboost-all-dev libgmime-3.0-dev &lt;span class="se"&gt;\&lt;/span&gt;
libprotobuf-dev libvte-2.91-dev protobuf-compiler ruby-ronn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point the compilation ran fine (albeit with a bunch of deprecation warnings etc):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; astroid
cmake -H. -Bbuild -GNinja &lt;span class="c1"&gt;# to use the ninja backend&lt;/span&gt;
cmake --build build
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Getting the tests to pass&lt;/h3&gt;
&lt;p&gt;Running the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; build
ctest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, all tests except &lt;code&gt;Test  #3: markdown&lt;/code&gt; and &lt;code&gt;Test #18: quote_html&lt;/code&gt; passed. It turned out to be two easy missing dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install cmark &lt;span class="c1"&gt;# for markdown&lt;/span&gt;
sudo apt-get install w3m &lt;span class="c1"&gt;# for quote_html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installing&lt;/h3&gt;
&lt;p&gt;Still just following the &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmake -H. -Bbuild -GNinja -DCMAKE_INSTALL_PREFIX&lt;span class="o"&gt;=&lt;/span&gt;/usr/local
sudo cmake --build build --target install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK! Now it works.&lt;/p&gt;
&lt;h2&gt;Step 2: Configuring two instances&lt;/h2&gt;
&lt;p&gt;The problem is that Astroid fundamentally seems built on the assumption of running in one instance only. Concretely, it assumes a single location &lt;code&gt;.config&lt;/code&gt; and &lt;code&gt;.cache&lt;/code&gt; directories, etc. Specifically, looking in the &lt;a href="https://github.com/astroidmail/astroid/blob/aae4c52091cc7ae28b336c19d2f0ac4a3a4056bf/src/config.cc"&gt;&lt;code&gt;src/config.cc&lt;/code&gt;&lt;/a&gt; file, we find the following paths:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Directory name&lt;/th&gt;
&lt;th&gt;First option&lt;/th&gt;
&lt;th&gt;Fallback option&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.config&lt;/td&gt;
&lt;td&gt;$XDG_CONFIG_HOME/.config&lt;/td&gt;
&lt;td&gt;$HOME/.config&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.data&lt;/td&gt;
&lt;td&gt;$XDG_DATA_HOME/.data&lt;/td&gt;
&lt;td&gt;$HOME/.local/share/.data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.cache&lt;/td&gt;
&lt;td&gt;$XDG_CACHE_HOME/.cache&lt;/td&gt;
&lt;td&gt;$HOME/.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.runtime&lt;/td&gt;
&lt;td&gt;$XDG_RUNTIME_HOME/.runtime&lt;/td&gt;
&lt;td&gt;$HOME/.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most importantly, Astroid's only option for a config file is at &lt;code&gt;.config/astroid/config&lt;/code&gt;. Clearly I need two different config files. The obvious solution is to start Astroid something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/mail/work/.config astroid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does work, but a potential problem is that other applications and libraries also rely on &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt;, and I find it difficult to predict how they will behave when they are started from the Astroid process. For example, running the above program, I found directories like  &lt;code&gt;~/mail/work/.config/ibus&lt;/code&gt; etc. I don't know how this will affect the system in the long run, and I don't want to learn the hard way.&lt;/p&gt;
&lt;h3&gt;Hacking Astroid to use other environment variables&lt;/h3&gt;
&lt;p&gt;So I made a quick and dirty hack. Open Astroid's &lt;code&gt;src/config.cc&lt;/code&gt; and replace &lt;code&gt;XDG_&lt;/code&gt; by &lt;code&gt;ASTROID_&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/src/config.cc b/src/config.cc&lt;/span&gt;
&lt;span class="gh"&gt;index 0b71440..8011ae9 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/src/config.cc&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/src/config.cc&lt;/span&gt;
&lt;span class="gu"&gt;@@ -70,7 +70,7 @@ namespace Astroid {&lt;/span&gt;
     if (test) {
       std_paths.config_dir = std_paths.home;
     } else {
&lt;span class="gd"&gt;-      char * config_home = getenv (&amp;quot;XDG_CONFIG_HOME&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+      char * config_home = getenv (&amp;quot;ASTROID_CONFIG_HOME&amp;quot;);&lt;/span&gt;
       if (config_home == NULL) {
         std_paths.config_dir = std_paths.home / path(&amp;quot;.config/astroid&amp;quot;);
       } else {
&lt;span class="gu"&gt;@@ -85,7 +85,7 @@ namespace Astroid {&lt;/span&gt;
     std_paths.plugin_dir = std_paths.config_dir / path (&amp;quot;plugins&amp;quot;);

     /* default data */
&lt;span class="gd"&gt;-    char * data = getenv (&amp;quot;XDG_DATA_HOME&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+    char * data = getenv (&amp;quot;ASTROID_DATA_HOME&amp;quot;);&lt;/span&gt;
     if (data == NULL) {
       std_paths.data_dir = std_paths.home / path(&amp;quot;.local/share/astroid&amp;quot;);
     } else {
&lt;span class="gu"&gt;@@ -93,7 +93,7 @@ namespace Astroid {&lt;/span&gt;
     }

     /* default cache */
&lt;span class="gd"&gt;-    char * cache = getenv (&amp;quot;XDG_CACHE_HOME&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+    char * cache = getenv (&amp;quot;ASTROID_CACHE_HOME&amp;quot;);&lt;/span&gt;
     if (cache == NULL) {
       std_paths.cache_dir = std_paths.home / path(&amp;quot;.cache/astroid&amp;quot;);
     } else {
&lt;span class="gu"&gt;@@ -101,7 +101,7 @@ namespace Astroid {&lt;/span&gt;
     }

     /* default runtime */
&lt;span class="gd"&gt;-    char * runtime = getenv (&amp;quot;XDG_RUNTIME_HOME&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+    char * runtime = getenv (&amp;quot;ASTROID_RUNTIME_HOME&amp;quot;);&lt;/span&gt;
     if (runtime == NULL) {
       std_paths.runtime_dir = std_paths.cache_dir;
     } else {
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recompile and install this new Astroid.&lt;/p&gt;
&lt;h3&gt;Configuring separate instances&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;launch-account&lt;/code&gt; script like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;ACCOUNT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="nv"&gt;BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ACCOUNT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BASE_DIR&lt;/span&gt;/accounts/&lt;span class="nv"&gt;$ACCOUNT&lt;/span&gt;

&lt;span class="nv"&gt;ACCOUNT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ASTROID_CONFIG_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.config &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ASTROID_DATA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.data &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ASTROID_CACHE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.cache &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ASTROID_RUNTIME_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.runtime &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;NOTMUCH_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.notmuch-config &lt;span class="se"&gt;\&lt;/span&gt;
astroid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;launch-account&lt;/code&gt; script can now be placed in some convenient location, in my case at &lt;code&gt;~/mail/launch-account&lt;/code&gt;, but it does not matter as long as the &lt;code&gt;accounts&lt;/code&gt; directory is in the same place. Inside the &lt;code&gt;accounts&lt;/code&gt; directory, each account has its own directory where config files etc can be placed. In my case it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── accounts
│   ├── personal
│   │   ├── .config
│   │   │   └── astroid
│   │   │       ├── config
│   │   │       ├── keybindings
│   │   │       └── poll.sh
│   │   ├── .mbsyncrc
│   │   ├── .msmtprc
│   │   ├── .notmuch-config
│   │   └── mail
│   └── work
│       ├── .config
│       │   └── astroid
│       │       ├── config
│       │       ├── keybindings
│       │       └── poll.sh
│       ├── .mbsyncrc
│       ├── .msmtprc
│       ├── .notmuch-config
│       └── mail
└── launch-account
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few locations where the different config files must have account-specific paths. The most important examples I can think of now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The directory &lt;code&gt;accounts/{account}/mail&lt;/code&gt; contains the account-specific maildir and the notmuch database. Of course &lt;code&gt;.mbsyncrc&lt;/code&gt; and &lt;code&gt;.notmuchconfig&lt;/code&gt; must be configured accordingly.&lt;/li&gt;
&lt;li&gt;Astroid must be configured to invoke msmtp with the account-specific config file, something like &lt;code&gt;msmtp --file=/home/rasmus/mail/accounts/work/.msmtprc -i -t&lt;/code&gt;. (Or, alternatively, I guess one could use a global &lt;code&gt;.msmtprc&lt;/code&gt; and use the auto-from feature.)&lt;/li&gt;
&lt;li&gt;The Astroid config must also point to the account-specific mail directories, etc, e.g., in the Astroid settings &lt;code&gt;accounts.{id}.save_sent_to&lt;/code&gt; and &lt;code&gt;startup.queries&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, the &lt;code&gt;accounts/{account}/.config/astroid/poll.sh&lt;/code&gt; script is actually the same for both my accounts, because it can use the &lt;code&gt;$ACCOUNT_DIR&lt;/code&gt; variable set in &lt;code&gt;launch-account&lt;/code&gt;. In my case it's currently just these few lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e &lt;span class="c1"&gt;# Exit as soon as one of the commands fail.&lt;/span&gt;
mbsync --config &lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.mbsyncrc -a
notmuch --config&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ACCOUNT_DIR&lt;/span&gt;/.notmuch-config new
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, launching either of the configurations is as simple as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/mail/launch-account work
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 3: How to run them simultaneously?&lt;/h2&gt;
&lt;p&gt;Launching either one of these configurations works just fine. But running both simultaneously does not. If I first start one (say &lt;code&gt;work&lt;/code&gt;) and then the other (&lt;code&gt;personal&lt;/code&gt;), then the second launch just results in another window for the account that launched first. Obviously the instances are sharing something that I don't want them to share.&lt;/p&gt;
&lt;p&gt;Installing and running another copy of Astroid with a different prefix makes no difference.&lt;/p&gt;
&lt;p&gt;Thus, at the moment I did not really achieve much. I could just as well run Astroid without my little patch, and instead make a little script to move in/out the account-specific &lt;code&gt;.config/astroid&lt;/code&gt;, &lt;code&gt;.cache/astroid&lt;/code&gt; etc before launching.&lt;/p&gt;
&lt;p&gt;To be continued, I suppose...&lt;/p&gt;</content><category term="email astroid"></category></entry><entry><title>Eurostat tools for Python: eust v0.4.0</title><link href="https://rasmuse.github.io/eust-v0.4.0.html" rel="alternate"></link><published>2019-05-17T00:00:00+02:00</published><updated>2019-05-17T00:00:00+02:00</updated><author><name>Rasmus Einarsson</name></author><id>tag:rasmuse.github.io,2019-05-17:/eust-v0.4.0.html</id><summary type="html">&lt;p&gt;A small set of tools to download, archive, and read Eurostat tables in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;tl;dr:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install eust
$ eust download table apro_cpsh1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;eust&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_table_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apro_cpsh1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2019-05-13 23:00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_table_metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apro_cpsh1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2019-05-13 23:00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bulk downloading and parsing Eurostat tables&lt;/h2&gt;
&lt;p&gt;In the last years I have been working a lot with tables from &lt;a href="https://ec.europa.eu/eurostat/"&gt;Eurostat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are several ways to download Eurostat data, but for me the most appealing way has always been to download a whole table to disk and then generate whatever extractions I need as I go, keeping the whole original table for future reference.&lt;/p&gt;
&lt;p&gt;Unfortunately, Eurostat's data query interfaces limit query sizes so much that you usually cannot come anywhere close to a full table download in one query. So although there are nice tools like &lt;a href="https://pandasdmx.readthedocs.io/en/latest/"&gt;pandaSDMX&lt;/a&gt; and &lt;a href="https://github.com/eurostat/pyrostat"&gt;pyrostat&lt;/a&gt; to interact with Eurostat's query interfaces, I much prefer a method that lets me download the whole table at once.&lt;/p&gt;
&lt;p&gt;To my knowledge, the most straightforward way to download a whole table at once is to go to Eurostat's &lt;a href="https://ec.europa.eu/eurostat/"&gt;bulk download facility&lt;/a&gt;, download a &lt;code&gt;.tsv&lt;/code&gt; file and parse that. The parsing is not super fun since these &lt;code&gt;.tsv&lt;/code&gt; files are not &lt;a href="https://www.jstatsoft.org/article/view/v059i10"&gt;tidy&lt;/a&gt;. But with a moderate amount of patience and some &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt; hacking I made a reader for these files already &lt;a href="https://github.com/rasmuse/biogas-residues-manure/blob/c8fc7e2c18f001ae346b69f806e2f251bf5a8b8d/biogasrm/prep_data.py#L98"&gt;several years ago&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Why we need to manage multiple versions of Eurostat tables&lt;/h2&gt;
&lt;p&gt;As Eurostat updates its databases, things change. Of course new data are added, but already published data can also be removed or changed as corrections become available. Whole new tables are created and old ones retired. I was actually approached by a colleague a couple of years ago who wanted to rerun my &lt;a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0171001#abstract0"&gt;old calculation&lt;/a&gt; but could no longer even find a table with the same name I had referred to.&lt;/p&gt;
&lt;p&gt;The reasonable reaction, which I wish I had adopted from the beginning, is to neatly archive every table version I am using, so I can dig it out later, rerun old calculations, and of course share the indata with colleagues. This is really the only way if we want to do reproducible research with these data. However, of course I have been lazy and disorganized, saving various versions of Eurostat files here and there in different project directories, and never kept track of the files as well as I should have.&lt;/p&gt;
&lt;h2&gt;Finally built and published a tool to keep things tidy. Why?&lt;/h2&gt;
&lt;p&gt;This situation has now finally changed thanks to the little Python library I've written. I'm releasing an early, not-so-polished version of this library &lt;a href="https://pypi.org/project/eust/"&gt;on PyPI&lt;/a&gt; and with source code on &lt;a href="https://github.com/rasmuse/eust"&gt;github&lt;/a&gt;. The reason? Honestly mainly to make my own life easier in the long run:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First of all, by publishing to PyPI I can easily keep the different versions of my little library. I require &lt;code&gt;eust==0.4.0&lt;/code&gt; in my current project, and then that project should keep on working for the forseeable future, although in a year I might have moved on to &lt;code&gt;eust=0.5.3&lt;/code&gt; for another project, etc.&lt;/li&gt;
&lt;li&gt;Second, this public announcement of a library seems to be a good way to force myself into maintaining a decent level of documentation and stability of the tool. Although I don't really expect anyone else to use this library, the mere possibility that some fellow Eurostat/Python hacker could find it useful makes me so happy and so frightened that I've now even written some basic documentation for the thing. Funny thing is I will probably have much more use of that documentation than anyone else.&lt;/li&gt;
&lt;/ul&gt;</content><category term="python eurostat"></category></entry><entry><title>I want to stop naming files</title><link href="https://rasmuse.github.io/i-want-to-stop-naming-files.html" rel="alternate"></link><published>2019-05-06T00:00:00+02:00</published><updated>2019-05-06T00:00:00+02:00</updated><author><name>Rasmus Einarsson</name></author><id>tag:rasmuse.github.io,2019-05-06:/i-want-to-stop-naming-files.html</id><summary type="html">&lt;p&gt;Workflow systems should name files for you&lt;/p&gt;</summary><content type="html">&lt;div class="summary"&gt;
&lt;p&gt;
    The tl;dr of this text is that I spend too much time and energy managing file outputs from computational workflows. I feel like Winnie-the-Pooh being dragged down the stairs, “there must be a better way; if only he could stop bumping for a moment to think of it.”
&lt;/p&gt;

&lt;p&gt;
    In the ramblings that follow I demonstrate a common source of file naming issues and try to show how it relates to popular workflow tools from GNU Make via Luigi to CWL and WDL. I distinguish two categories of tools: Those where all outputs share the same namespace, and those where they don't. The latter are potentially much more useful because they enable more automation of file naming.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src="https://rasmuse.github.io/images/edward-bear-bump-bump.jpg" title="“Here is Edward Bear, coming downstairs now, bump, bump, bump, on the back of his head, behind Christopher Robin. It is, as far as he knows, the only way of coming downstairs, but sometimes he feels that there really is another way, if only he could stop bumping for a moment and think of it. And then he feels that perhaps there isn't.”"&gt;&lt;/p&gt;
&lt;h1&gt;How the typical problem arises&lt;/h1&gt;
&lt;p&gt;In my research I often find myself in the following situation. I have produced a bunch of Python scripts or specialized command-line tools to transform some input files to an output file. The relevant part may look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;indata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;outdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_fig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;figure.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the implementation is packed with magic constants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;load_data()&lt;/code&gt; function takes no parameters so it must contain some file paths or similar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do_analysis(indata)&lt;/code&gt; may also have hard-coded parameters to algorithms, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;figure.png&lt;/code&gt; is a great name for a figure, as long as you only have one...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I am not worried about any of this, because my wonderful script produces the file &lt;code&gt;figure.png&lt;/code&gt; which looks great, and by the way it's Friday afternoon and we have more important things to do than clean up this code.&lt;/p&gt;
&lt;h2&gt;Then it starts growing&lt;/h2&gt;
&lt;p&gt;So far so good. The problem arises on Monday morning when I return to work and realize a problem with last Friday's decision on the parameter value &lt;code&gt;k = 3&lt;/code&gt;, hidden deep inside &lt;code&gt;do_analysis()&lt;/code&gt;. I need to check what happens with &lt;code&gt;k = 4&lt;/code&gt;. I am not stupid, so I realize I will want to play with different values of &lt;code&gt;k&lt;/code&gt; and I separate it out as a function argument. The revised script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;indata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;outdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_fig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;figure-k_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, excellent, I re-run the script and look at my new &lt;code&gt;figure-k_4.png&lt;/code&gt; which looks even more interesting. Maybe I should try this for a few more values, and by the way, I also want to dump the outdata to a file for later inspection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;indata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;outdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outdata.h5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;df&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_fig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;figure-k_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice! Now another issue is that I want to switch out part of the indata, so I change the script a bit more and also organize the outputs into different directories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Parameter sets&lt;/span&gt;

&lt;span class="n"&gt;ks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;eurostat_tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;apro_cpshr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2019-04-12 23:00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;apro_cpnhr_h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2019-03-21 23:00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Actual work&lt;/span&gt;

&lt;span class="n"&gt;common_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eurostat_tables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;eurostat_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_table_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;outdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eurostat_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;outdata.h5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;df&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_fig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;figure-k_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Where it always ends up&lt;/h2&gt;
&lt;p&gt;OK, so you see where this is going. The list of parameters grows, and the naming schemes for the directories and files gets ever more complicated. One parameter added to the soup, another removed. Soon enough I have created myself a &lt;code&gt;Makefile&lt;/code&gt; (&lt;a href="https://github.com/rasmuse/biogas-residues-manure/blob/master/Makefile"&gt;see real-world example here&lt;/a&gt;) to keep track of all the outputs.&lt;/p&gt;
&lt;p&gt;Note the &lt;code&gt;os.makedirs(outdir, exist_ok=True)&lt;/code&gt; above. I'm not sure how many times I have had a 10-minute calculation crash because of a &lt;code&gt;FileNotFoundError&lt;/code&gt; or a &lt;code&gt;FileExistsError&lt;/code&gt; raised when dumping the outdata.&lt;/p&gt;
&lt;p&gt;And let's not even talk about the naming schemes of the cache files I start to keep for some of the intermediate operations. Somehow these projects always evolve into a living hell of subdirectory creation, encoding of parameter values in file names, and manual cache invalidation. Oh, the cache invalidation.&lt;/p&gt;
&lt;p&gt;Some days I literally think I might go crazy.&lt;/p&gt;
&lt;h1&gt;Looking closer: What is the problem really?&lt;/h1&gt;
&lt;p&gt;As a result I have spent a disturbing amount of time thinking of solutions to the &lt;a href="https://xkcd.com/974/"&gt;General Problem&lt;/a&gt; of running computational workflows and managing the outputs. But before diving into the solutions part, I want to elaborate a little bit on the problem.&lt;/p&gt;
&lt;h2&gt;Thinking ahead is not an option&lt;/h2&gt;
&lt;p&gt;One important insight for me is that these exploratory data analysis tasks &lt;em&gt;by nature grow in hard-to-predict ways&lt;/em&gt;. Separating out all the possible parameters from the start and naming the file outputs accordingly is not realistic since I do not even know what they are. I could just as well have realized that the parameter &lt;code&gt;k&lt;/code&gt; was not important, but maybe &lt;code&gt;sigma_x&lt;/code&gt; is? So I constantly change the scripts to accommodate the most recent idea.&lt;/p&gt;
&lt;p&gt;Thus, there is no Grand Solution to the issue of changing specifications. The changing definition of the problem is part of the process. The set of parameter values will change: should I sweep &lt;code&gt;k&lt;/code&gt; or &lt;code&gt;sigma_x&lt;/code&gt; or both? The plumbing between these operations will change: should I do this data cleaning operation before or after the data subset selection?&lt;/p&gt;
&lt;h2&gt;A dependency graph of side effects&lt;/h2&gt;
&lt;p&gt;Another part of the problem, and maybe of the solution as we shall see, is that data analysis tools rely heavily on side effects (files, in this case), while the overall structure of the workflow can be modelled in a more abstract, functional way.&lt;/p&gt;
&lt;p&gt;File outputs are essential to connect different tools like Python, R, bash, and various command line tools. They are also useful because we can inspect and visualize outputs using Excel, &lt;a href="https://sqlitebrowser.org"&gt;SQLite browser&lt;/a&gt;, image viewers, etc. These tools are and will remain the core of laptop-scale data processing for the forseeable future.&lt;/p&gt;
&lt;p&gt;By contrast, the plumbing between tasks lends itself very well to more abstract, functional thinking: the output set &lt;em&gt;y&lt;/em&gt; is obtained by mapping function &lt;em&gt;f&lt;/em&gt; over the input set &lt;em&gt;x&lt;/em&gt;, the output &lt;em&gt;z&lt;/em&gt; is an aggregation of the whole set &lt;em&gt;x&lt;/em&gt;, etc. It is natural to see a data analysis workflow as a directed acyclical graph of operations. Although each one of those steps is actually a mess of imperative programs, side effects in file systems, etc, the overarching structure is easiest to express in functional terms.&lt;/p&gt;
&lt;p&gt;Let's look again at the example but without all the file handling stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;common_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eurostat_tables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;eurostat_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_table_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eurostat_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_fig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Forget for a moment that these are nested loops, and see them more abstractly as nested mappings of operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;common_data&lt;/code&gt; is defined at the root. There is only one of it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eurostat_data&lt;/code&gt; and &lt;code&gt;outdata&lt;/code&gt; both have one item for each entry in &lt;code&gt;eurostat_tables&lt;/code&gt;. They are are mappings from the set of items in&lt;code&gt;eurostat_tables&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig&lt;/code&gt; is nested below &lt;code&gt;outdata&lt;/code&gt;. It can be seen as a mapping from the product (&lt;code&gt;eurostat_tables&lt;/code&gt; × &lt;code&gt;ks&lt;/code&gt;), or if you prefer as a sort of two-dimensional object, a set of sets of output files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(By the way, what I have not shown here is that many workflows involve aggregating functions, i.e., operations that reduce the dimension of something. In some cases these aggregations can be formulated as &lt;a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)"&gt;fold operations&lt;/a&gt;, but they are often more general, i.e., potentially &lt;a href="https://en.wikipedia.org/wiki/Aggregate_function"&gt;require access to the whole set of inputs&lt;/a&gt;. This is an important part of the graph structure too, but let's leave it for now.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A main reason I am constantly dealing with file naming issues is that the tasks are nested inside one another.&lt;/strong&gt; In the first step of the example above we went from having one &lt;code&gt;figure.png&lt;/code&gt;. But very soon we had to produce a whole range of similar figures named &lt;code&gt;{name}-{version}/figure-k_{k}.png&lt;/code&gt;. The clean and beautiful world of workflow graphs collides with the ugly truth of side effects like output files.&lt;/p&gt;
&lt;h3&gt;Side note: Drawing the line between tasks and the graph structure&lt;/h3&gt;
&lt;p&gt;This section is somewhat a side-note, but I find it relevant to elaborate a little on this proposed dichotomy.&lt;/p&gt;
&lt;p&gt;I'm not proposing there is a strict or clear line to be drawn between the imperative-style operations and the functional-style structure of a computational workflow. My point is that in every data analysis project I have ever done, it has been natural to think of some operations as atomic, i.e., as isolated and irreducible in some sense, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Join these two tables and dump to a csv file.&lt;/li&gt;
&lt;li&gt;Download this URL and save to a certain file name.&lt;/li&gt;
&lt;li&gt;Calculate the mean pixel value of this GIS raster dataset in each of these geographic regions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am not even going to try to define what makes an operation “atomic”. I don't think there is a useful definition.&lt;/p&gt;
&lt;p&gt;But many seem to share the intuition that some operations can and should be bundled into logical units of work. Just look at the examples from some popular workflow tools (&lt;a href="http://www.commonwl.org/user_guide/"&gt;CWL&lt;/a&gt;, &lt;a href="https://software.broadinstitute.org/wdl/documentation/quickstart"&gt;WDL&lt;/a&gt;, &lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt;, &lt;a href="https://luigi.readthedocs.io/en/stable/tasks.html"&gt;Luigi&lt;/a&gt;, &lt;a href="https://snakemake.readthedocs.io/en/stable/tutorial/basics.html"&gt;Snakemake&lt;/a&gt;, &lt;a href="http://pydoit.org/"&gt;doit&lt;/a&gt;, and many others). They all have some notion of a Task as the fundamental unit of work. A Task can encapsulate more or less any program execution, while the encapsulating workflow languages typically only allow directed acyclic graphs.&lt;/p&gt;
&lt;h1&gt;The solution: namespaces for files (a.k.a directories)&lt;/h1&gt;
&lt;p&gt;Therefore, I think &lt;strong&gt;the solution is to provide a nice and simple way to do the plumbing between Python functions, R scripts, bash scripts, whatever, that provides some abstraction from the awful truth that intermediate file outputs have to be stored somewhere.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To sum up the ramblings so far, I have concluded three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exploratory data analysis workflows tend to consist of “atomic” operations that create files with intermediate and final results. Since the interconnections between these operations change all the time, the output file names have to be renamed too.&lt;/li&gt;
&lt;li&gt;In particular, much of the naming issues arise when nesting/mapping operations over sets of input data files, parameters, etc. In the end, I am often interested in output file sets that are best defined as a mapping from some set of inputs. Therefore it is very useful if file outputs of such mappings or nested operations can be automatically named in a meaningful way.&lt;/li&gt;
&lt;li&gt;Workflow tools like GNU Make and its many descendants (pun intended) are a natural and useful choice to define the plumbing between separate tasks.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My two proposals are therefore the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let's use workflow systems to abstract away as much as possible of the renaming of files that is needed to connect different tasks to each other.&lt;/li&gt;
&lt;li&gt;Let nesting/mapping operations be explicitly represented in workflow languages. Then a useful naming of output files can be automated and our limited time and mental capacity be directed to more interesting problems than naming files.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;GNU Make and siblings use a single namespace&lt;/h2&gt;
&lt;p&gt;GNU Make is useful for automating workflows. However, it is not useful for automating workflows that are deeply nested and rapidly changing. &lt;strong&gt;Since all the targets are defined in the same namespace (the same output directory, concretely), they have to be uniquely named, and this has to be done manually.&lt;/strong&gt; As far as I understand, the same goes for popular tools like Luigi, snakemake, and doit (but please correct me if I am wrong).&lt;/p&gt;
&lt;p&gt;I still use GNU Make though, mainly because it is so clear and direct, easy to get started with, and because it runs really fast.&lt;/p&gt;
&lt;h2&gt;WDL creates separate namespaces&lt;/h2&gt;
&lt;p&gt;In contrast, the workflow languages &lt;a href="http://www.commonwl.org/user_guide/"&gt;CWL&lt;/a&gt; and &lt;a href="https://software.broadinstitute.org/wdl/documentation/quickstart"&gt;WDL&lt;/a&gt; (and please let me know about others) define a new namespace for each task, so that the separate tasks become more like functions. To illustrate, in Python I write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When &lt;code&gt;f&lt;/code&gt; is called here, the arguments are assigned the (temporary) names &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and inside the function body that is all we need. The function &lt;code&gt;f&lt;/code&gt; will never know that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; were loaded from the same function. In a similar way, a WDL task is like a function that also abstracts away input file names, something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;temp&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;load_data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important point here is that the WDL workflow is executed using a temporary working directory for each task call and substituting the file name placeholders &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; for whatever temporary file names seem suitable. The task &lt;code&gt;load_data&lt;/code&gt; concretely created a file output called &lt;code&gt;bar&lt;/code&gt;, but this will never be known to the task &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;WDL can also do a lot of other cool things that I have not mentioned here. I suggest you &lt;a href="https://software.broadinstitute.org/wdl/documentation"&gt;check it out&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://www.commonwl.org/user_guide/"&gt;CWL&lt;/a&gt; is in principle also a cool project, but in practice I find its YAML-based syntax to be clunky and hard to read. By comparison, WDL is exquisitely readable and writeable considering how much power the language has.)&lt;/p&gt;
&lt;h3&gt;Why I'm not using WDL&lt;/h3&gt;
&lt;p&gt;Almost only for one reason: It is slow. WDL is designed to run big bioinformatics pipelines on clusters, and therefore the execution engine Cromwell has not been optimized to run small laptop-scale workflows fast. Executing the workflow above with the &lt;a href="https://github.com/broadinstitute/cromwell/releases/tag/40"&gt;latest Cromwell engine&lt;/a&gt; takes about 30 seconds on my laptop. By comparison, I timed the Makefile execution to 6 milliseconds ;)&lt;/p&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;If you read through all these ramblings I hope you found it interesting. I wrote it mostly to clarify my own thinking. If you had the patience to read &lt;em&gt;and&lt;/em&gt; you found it interesting, then probably I would find it interesting to talk to you about file names, or whatever. Pop me an email on &lt;a href="mailto:workflows [at] rasmuseinarsson.se"&gt;workflows [at] rasmuseinarsson.se&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If there was a lightweight execution engine for local laptop-scale jobs I would definitely use WDL, because I think they have done many things right (not just the file naming business). I have been close enough to try to build a simple execution engine myself.&lt;/p&gt;
&lt;p&gt;Sometimes I also put a day or two into hacking on another tool with a friend (we'll let you know if it gets anywhere near useful).&lt;/p&gt;
&lt;p&gt;Now I spent way too much complaining about all this. I have to get back to renaming file outputs.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://rasmuse.github.io/images/edward-bear-bump-bump.jpg"&gt;&lt;/p&gt;
&lt;p&gt;“Here is Edward Bear, coming downstairs now, bump, bump, bump, on the back of his head, behind Christopher Robin. It is, as far as he knows, the only way of coming downstairs, but sometimes he feels that there really is another way, if only he could stop bumping for a moment and think of it. And then he feels that perhaps there isn't.”&lt;/p&gt;</content><category term="workflows"></category><category term="WDL"></category><category term="CWL"></category></entry></feed>